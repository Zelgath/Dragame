import sys

import pygame

from fireball import Fireball
from dragon import Dragon
from freezer import Freezer
from settings import Settings
from time import sleep

def check_keydown_events(event, ai_settings, screen, dragon, fireballs):
	'''Reaction for pressing the button.'''
	if event.key == pygame.K_UP:
		dragon.moving_up = True
	elif event.key == pygame.K_DOWN:
		dragon.moving_down = True
	elif event.key == pygame.K_RIGHT:
		dragon.moving_right = True
	elif event.key == pygame.K_LEFT:
		dragon.moving_left = True
		
	elif event.key == pygame.K_SPACE:
		#Creating new fireball and adding it to the group
		if (len(fireballs)) < ai_settings.fireballs_allowed and dragon.orient == 1:
			new_fireball = Fireball(ai_settings, screen, dragon)
			fireballs.add(new_fireball)
		
	elif event.key == pygame.K_q:
		sys.exit()
		
def check_keyup_events(event, dragon):
	'''Reaction for realeasing the button.'''
	if event.key == pygame.K_UP:
		dragon.moving_up = False
	elif event.key == pygame.K_DOWN:
		dragon.moving_down = False
	elif event.key == pygame.K_RIGHT:
		dragon.moving_right = False
	elif event.key == pygame.K_LEFT:
		dragon.moving_left = False

def check_events(ai_settings, screen, stats, play_button, dragon, fireballs):
	'''Reaction for the events generated by keyboard and mouse.'''
	for event in pygame.event.get():
			if event.type == pygame.QUIT:
				sys.exit()	
			elif event.type == pygame.KEYDOWN:
				check_keydown_events(event, ai_settings, screen, dragon, fireballs)				
			elif event.type == pygame.KEYUP:
				check_keyup_events(event, dragon)
			elif event.type == pygame.MOUSEBUTTONDOWN:
				mouse_x, mouse_y = pygame.mouse.get_pos()
				check_play_button(ai_settings, screen, stats, play_button, dragon, mouse_x, mouse_y)
				
def check_play_button(ai_settings, screen, stats, play_button, dragon, mouse_x, mouse_y):
	'''Starting a new game after clicking a button.'''
	if play_button.rect.collidepoint(mouse_x, mouse_y):
		stats.reset_stats()
		stats.game_active = True
		
		#centering dragon and creating new freezers
		dragon.center_dragon()	



	
def update_screen(ai_settings, screen, stats, dragon, freezers, fireballs, play_button, score_board):
	'''Actualization of images on screen and transition to the new screen.'''
	#Screen refresh during every iteration in the loop.
	screen.fill((0 , 0, 0))
	screen.blit(ai_settings.bg,(0,0))
	#again drawing all fireballs under layers of dragon and monsters
	for fireball in fireballs.sprites():
		fireball.draw_fireball()
	dragon.blitme()
		
	
	for freezer in freezers.sprites():
		freezer.draw_freezer()
		
	#Showing button only when game is not active
	if not stats.game_active:
		play_button.draw_button()
		activation = False	
	
	#SHowing the scoreboard
	score_board.draw_score()
				
	#WyÅ›wietlenie ostatnio zmodyfikowanego ekranu.
	pygame.display.flip()

def update_fireballs(ai_settings, screen, dragon, freezers, fireballs):
	fireballs.update()
	
	#deleting fireballs which are beside the screen.
	for fireball in fireballs.copy():
		if fireball.rect.right > 1200:
			fireballs.remove(fireball)
			
	collisions = pygame.sprite.groupcollide(fireballs, freezers, True, True)
	
def update_freezers(ai_settings, stats, screen, dragon, freezers, fireballs, score_board):
	freezers.update()
	#deleting freezers which are beside the screen.
	for freezer in freezers.copy():
		if freezer.rect.right < 0:
			freezers.remove(freezer)
	
	if pygame.sprite.spritecollideany(dragon, freezers):
		dragon_hit(ai_settings, stats, screen, dragon, freezers, fireballs, score_board)
	
	check_freezers_left(ai_settings, stats, screen, dragon, freezers, fireballs)

def dragon_hit(ai_settings, stats, screen, dragon, freezers, fireballs, score_board):
	'''Reaction for hiting freezer to dragon.'''
	if stats.dragons_left > 0:
		stats.dragons_left -= 1
		str(stats.dragons_left)
		dragon.center_dragon()
		
		freezers.empty()
		sleep(0.00000000000001)
		print(stats.dragons_left)
	else:
		stats.game_active = False
def check_freezers_left(ai_settings, stats, screen, dragon, freezers, fireballs):
	'''Checking if freezer got to the edge of the screen'''
	screen_rect = screen.get_rect()
	for freezer in freezers.sprites():
		if freezer.rect.left <= screen_rect.left:
			dragon_hit(ai_settings, stats, screen, dragon, freezers, fireballs, score_board)
			break


	
